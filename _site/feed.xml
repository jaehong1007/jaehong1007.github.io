<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/fresh/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/fresh/" rel="alternate" type="text/html" /><updated>2018-01-05T17:57:05+09:00</updated><id>http://localhost:4000/fresh/</id><title type="html">Yabi’ Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Facebooklogin</title><link href="http://localhost:4000/fresh/facebooklogin/" rel="alternate" type="text/html" title="Facebooklogin" /><published>2017-10-24T00:00:00+09:00</published><updated>2017-10-24T00:00:00+09:00</updated><id>http://localhost:4000/fresh/facebooklogin</id><content type="html" xml:base="http://localhost:4000/fresh/facebooklogin/">&lt;h2 id=&quot;facebook-login&quot;&gt;FACEBOOK login&lt;/h2&gt;

&lt;p&gt;config_secret &amp;gt; settings_common.json&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;facebook&quot;: {
    &quot;app_id&quot;: &quot;xxxxxxxxxxxxxx&quot;,
    &quot;secret_code&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;settings.py 에 관련 내용 추가&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# FACEBOOK
FACEBOOK_APP = config_secret_common['facebook']['app_id']
FACEBOOK_SECRET_CODE = config_secret_common['facebook']['secret_code']
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 우리사이트에서 ‘페이스북 로그인’ 버튼 클릭&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;우리 사이트에서 ‘그럼 페이스북 가서 로그인 하고 응답을 받아오세요’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자는 페이스북으로 이동해서 로그인과 권한 인가를 완료함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 로그인을 완료한 후 redirect_uri 위치로 사용자가 로그인한 정보(code)를 보냄&lt;/p&gt;

    &lt;p&gt;4-1. 바로 액세스 토큰을 보내주지않음&lt;/p&gt;

    &lt;p&gt;4-2. APP_ID는 공개정보이기 때문에, SECRET_CODE를 사용해 컨슈머를 인증해야함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브라우저는 리디렉션 요청을 받아 우리 사이트에 GET요청&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브라우저는 GET요청에 포함된 code정보를 이용해 페이스북 서버에 access_token을 요청&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;페이스북이 access_token을 돌려줌&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(선택사항) access_token을 디버그함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;access_tokenDMF DLDYDGO USERINFO를 graphAPI에 요청해 받아옴&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;받아온 UserInfo에 해당하는 User가 우리의 DB에 있는지 검사&lt;/p&gt;

    &lt;p&gt;10-1. 있으면 해당 user를 로그인&lt;/p&gt;

    &lt;p&gt;10-2. 없으면 정보로 유저를 만들어 로그인&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;post_list로 리다이렉트&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/Users/j/Desktop/8KjWN.png&quot; alt=&quot;8KjWN&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">FACEBOOK login</summary></entry><entry><title type="html">Login</title><link href="http://localhost:4000/fresh/login/" rel="alternate" type="text/html" title="Login" /><published>2017-10-23T00:00:00+09:00</published><updated>2017-10-23T00:00:00+09:00</updated><id>http://localhost:4000/fresh/login</id><content type="html" xml:base="http://localhost:4000/fresh/login/">&lt;ol&gt;
  &lt;li&gt;post_detail&lt;/li&gt;
  &lt;li&gt;POST요청을 함(좋아요버튼 누름)&lt;/li&gt;
  &lt;li&gt;-&amp;gt; post_like_toggle뷰로 요청이 들어감&lt;/li&gt;
  &lt;li&gt;post_like_toggle뷰는 login_required로 감싸져있음&lt;/li&gt;
  &lt;li&gt;login_required뷰는 사용자가 인증되어있지 않으므로 로그인화면으로 이동하며 자동으로 ‘next’에 자신이 감싸고있는 뷰(요청)의 주소를 추가&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;— 우리가 만든 데코레이터&lt;/p&gt;

&lt;p&gt;Login_required로 감쌌을 때, 감싸고 있는 뷰가 요청된 주소를 next에 추가&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;OAuth 2.0 (facebook 인증 시스템)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;​&lt;/li&gt;
  &lt;li&gt;​&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">post_detail POST요청을 함(좋아요버튼 누름) -&amp;gt; post_like_toggle뷰로 요청이 들어감 post_like_toggle뷰는 login_required로 감싸져있음 login_required뷰는 사용자가 인증되어있지 않으므로 로그인화면으로 이동하며 자동으로 ‘next’에 자신이 감싸고있는 뷰(요청)의 주소를 추가</summary></entry><entry><title type="html">Notes</title><link href="http://localhost:4000/fresh/notes/" rel="alternate" type="text/html" title="Notes" /><published>2017-10-19T00:00:00+09:00</published><updated>2017-10-19T00:00:00+09:00</updated><id>http://localhost:4000/fresh/notes</id><content type="html" xml:base="http://localhost:4000/fresh/notes/">&lt;h2 id=&quot;django-instagram&quot;&gt;Django-Instagram&lt;/h2&gt;

&lt;h3 id=&quot;커스텀-유저-모델-사용&quot;&gt;커스텀 유저 모델 사용&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;member/models.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.contrib.auth.models import AbstractUser

class MyUser(AbstractUser):
	pass
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;커스텀 유저 모델을 정의할 때는 AbstractUser 또는 AbstractBaseUser&lt;/p&gt;

&lt;h4 id=&quot;custom-user-model-을-settingspy-에-정의&quot;&gt;Custom user model 을 &lt;strong&gt;settings.py&lt;/strong&gt; 에 정의&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;config/settings.py&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
...
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

AUTH_USER_MODEL = 'member.MyUser'
...
...
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'member',
]
...
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;DB migration&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./manage.py makemigration member
./manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;슈퍼유저 생성&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Django-Instagram</summary></entry><entry><title type="html">Django_field</title><link href="http://localhost:4000/fresh/django_field/" rel="alternate" type="text/html" title="Django_field" /><published>2017-10-18T00:00:00+09:00</published><updated>2017-10-18T00:00:00+09:00</updated><id>http://localhost:4000/fresh/django_field</id><content type="html" xml:base="http://localhost:4000/fresh/django_field/">&lt;h2 id=&quot;django-field&quot;&gt;DJango Field&lt;/h2&gt;

&lt;h3 id=&quot;one-to-one-relationship&quot;&gt;One-to-one Relationship&lt;/h3&gt;

&lt;p&gt;Usermode&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;username&lt;/li&gt;
  &lt;li&gt;password&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;User info model&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;name&lt;/li&gt;
  &lt;li&gt;Phone number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;user.userinfo.name&lt;/p&gt;

&lt;p&gt;###Foreign Key(Many-to-One)&lt;/p&gt;

&lt;p&gt;School (여기에는 student라는 데이터가 저장되지 않음)&lt;/p&gt;

&lt;p&gt;Student(Many가 되는 쪽에 Foreign키를 지정)(School의 pk가 저장됨)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Class Students():
	school = models.Foreignkey(school)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;AAA.school =school의pk&lt;/p&gt;

&lt;p&gt;A.student = student의 pk&lt;/p&gt;

&lt;h2 id=&quot;many-to-many&quot;&gt;Many-to-Many&lt;/h2&gt;

&lt;p&gt;Group&lt;/p&gt;

&lt;p&gt;Student&lt;/p&gt;

&lt;p&gt;중간모델이 자동으로 만들어짐&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Group.member()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;through = ‘중간자 모델’&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Post.users.all() - 라이크를 한 모든 사람&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Related_name = ‘like_posts’(역참조)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;User.like_posts.all() - like한 모든 사람&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;post.like_users.all() -&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">DJango Field</summary></entry></feed>